import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_database/ui/firebase_animated_list.dart';

import './screens/itemlisting.dart' as itemListing;

// itemlisting.dart -> add an item for listing
// What do we need for an item listing:
//  1. Name of item
//  2. Quantity
//  3. Location of pick-up
//  TODO: 4. Category of item (Drop-down list)
//  TODO: 5. Photo(s) of item
//Future<Null> addItem(String user, String itemName, int qty, String location, String category) async {
//  DatabaseReference _addItemRef;
//  _addItemRef = FirebaseDatabase.instance.reference().child('items/${user}');
//
//}


// Add user into database (itemdonatestore-alpha -> users)
// DO NOT add user if it already exists
Future<Null> addUser(String user) async {
  dynamic retrieveUsers;
  List<String> rawUsersList = [];  // add existing users to this List
  List<String> usersList = [];

  DatabaseReference usersRef = FirebaseDatabase.instance.reference().child("users");

  // usersRef.orderByChild("username".once() is an async function, so we must wait till it ends to get our data
  retrieveUsers = await usersRef.orderByChild("username").once();

  // Retrieve data from itemdonatestore-alpha -> users as a Map
  Map<dynamic, dynamic> usersMap = retrieveUsers.value;
  usersMap.forEach((key, value) => rawUsersList.add(value.toString()));
  for (var username in rawUsersList) {
    usersList.add(username.substring(11, username.length-1));
  };

  // Add user only if it does not exist in database->child('users')
  if(usersList.contains(user)) return;
  else {
    usersRef.push().set({
      "username" : "$user",
    });
  }
}


// Retrieve item based on Key-Value pair
Future<String> readItems(String user) async {
//  String result = (await FirebaseDatabase.instance.reference().child("itemsListing/${user}/Item1/Item Name").once()).value;
//  return result;
  DatabaseReference _dbRef;
  _dbRef = FirebaseDatabase.instance.reference().child("itemsListing/${user}");

  dynamic retrievedItems;
  retrievedItems = _dbRef.orderByChild("Item Name").once();
  print(retrievedItems);
}

Future<Null> removeData(String user) async {
  DatabaseReference _messageRef;
  _messageRef = FirebaseDatabase.instance.reference().child('messages/${user}');
  await _messageRef.remove();
}

Future<Null> setData(String user, String key, String value) async {
  DatabaseReference _messageRef;
  _messageRef = FirebaseDatabase.instance.reference().child('messages/${user}');
  _messageRef.set(<String, String>{key : value});
}

Future<Null> updateData(String user, String key, String value) async {
  DatabaseReference _messageRef;
  _messageRef = FirebaseDatabase.instance.reference().child('messages/${user}');
  _messageRef.update(<String, String>{key : value});
}

// Add items with unique id generated by Firebase
Future<Null> addUniqueItem(String user) async {
  DatabaseReference _dbRef;

  _dbRef = FirebaseDatabase.instance.reference().child("itemsListing/${user}");

  _dbRef.push().set({
    "Item Name" : "IPad Pro 10",
    "Qty" : 2,
    "Location" : "Jurong West",
    "Category" : "Electronics",
    "Status" : "Not Available",
  });
}